{
    "language": "Solidity",
    "sources": {
        "MultiSigWallet.sol": {
            "urls": ["${__WORKSPACE__}/contracts/sns/token/MultiSigWallet.sol"]
        },
        "SlotNSlotICOWallet.sol": {
            "urls": ["${__WORKSPACE__}/contracts/sns/token/SlotNSlotICOWallet.sol"]
        }
    },
    // Optional
    "settings": {
        // Optional: Sorted list of remappings
        "remappings": [":zeppelin-solidity=${__WORKSPACE__}/node_modules/zeppelin-solidity"],
        // Optional: Optimizer settings (enabled defaults to false)
        "optimizer": {
            "enabled": true,
            "runs": 500
        },
        // Addresses of the libraries. If not all libraries are given here, it can result in unlinked objects whose output data is different.
        "libraries": {},
        // The following can be used to select desired outputs.
        // If this field is omitted, then the compiler loads and does type checking, but will not generate any outputs apart from errors.
        // The first level key is the file name and the second is the contract name, where empty contract name refers to the file itself,
        // while the star refers to all of the contracts.
        //
        // The available output types are as follows:
        //   abi - ABI
        //   ast - AST of all source files
        //   legacyAST - legacy AST of all source files
        //   devdoc - Developer documentation (natspec)
        //   userdoc - User documentation (natspec)
        //   metadata - Metadata
        //   ir - New assembly format before desugaring
        //   evm.assembly - New assembly format after desugaring
        //   evm.legacyAssembly - Old-style assembly format in JSON
        //   evm.bytecode.object - Bytecode object
        //   evm.bytecode.opcodes - Opcodes list
        //   evm.bytecode.sourceMap - Source mapping (useful for debugging)
        //   evm.bytecode.linkReferences - Link references (if unlinked object)
        //   evm.deployedBytecode* - Deployed bytecode (has the same options as evm.bytecode)
        //   evm.methodIdentifiers - The list of function hashes
        //   evm.gasEstimates - Function gas estimates
        //   ewasm.wast - eWASM S-expressions format (not supported atm)
        //   ewasm.wasm - eWASM binary format (not supported atm)
        //
        // Note that using a using `evm`, `evm.bytecode`, `ewasm`, etc. will select every
        // target part of that output.
        //
        "outputSelection": {
            // Enable the metadata and bytecode outputs of every single contract.
            "*": {
                "*": ["abi", "evm.bytecode.object", "evm.bytecode.linkReferences"]
            }
        }
    }
}